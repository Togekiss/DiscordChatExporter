name: main

on:
  workflow_dispatch:
  push:
    branches:
      - release
    tags:
      - "*"
  pull_request:
    branches:
      - release

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  format:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install .NET
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: 9.0.x

      # Build the project separately to discern between build and format errors
      - name: Build
        run: >
          dotnet build
          -p:CSharpier_Bypass=true
          --configuration Release

      - name: Verify formatting
        id: verify
        run: >
          dotnet build
          -t:CSharpierFormat
          --configuration Release
          --no-restore

      - name: Report issues
        if: ${{ failure() && steps.verify.outcome == 'failure' }}
        run: echo "::error title=Bad formatting::Formatting issues detected. Please build the solution locally to fix them."
  
  # Tests need access to a particular Discord server I do not have access to, so I got rid of them for now

  pack:
    strategy:
      matrix:
        app:
          - DiscordChatExporter.Cli
          - DiscordChatExporter.Gui
        rid:
          - win-arm64
          - win-x86
          - win-x64
          - linux-arm
          - linux-arm64
          - linux-musl-x64
          - linux-x64
          - osx-arm64
          - osx-x64
        include:
          - app: DiscordChatExporter.Cli
            asset: DiscordChatExporter.Cli
          - app: DiscordChatExporter.Gui
            # GUI assets aren't suffixed, unlike the CLI assets
            asset: DiscordChatExporter

    runs-on: ${{ startsWith(matrix.rid, 'win-') && 'windows-latest' || startsWith(matrix.rid, 'osx-') && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 10

    permissions:
      actions: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install .NET
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: 9.0.x

      - name: Publish app
        run: >
          dotnet publish ${{ matrix.app }}
          -p:Version=${{ github.ref_type == 'tag' && github.ref_name || format('999.9.9-ci-{0}', github.sha) }}
          -p:CSharpier_Bypass=true
          -p:PublishMacOSBundle=${{ startsWith(matrix.rid, 'osx-') }}
          --output ${{ matrix.app }}/bin/publish/
          --configuration Release
          --runtime ${{ matrix.rid }}
          --self-contained

      - name: Upload app binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset }}.${{ matrix.rid }}
          path: ${{ matrix.app }}/bin/publish/
          if-no-files-found: error


  release:
    if: ${{ github.ref_type == 'tag' }}

    needs:
      - format
    #  - test
      - pack

    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write

    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release create ${{ github.ref_name }}
          --repo ${{ github.event.repository.full_name }}
          --title ${{ github.ref_name }}
          --generate-notes
          --verify-tag

  deploy:
    needs: release
    strategy:
      matrix:
        app: [DiscordChatExporter.Cli, DiscordChatExporter.Gui]
        rid: [win-arm64, win-x86, win-x64, linux-arm, linux-arm64, linux-musl-x64, linux-x64, osx-arm64, osx-x64]
        include:
          - app: DiscordChatExporter.Cli
            asset: DiscordChatExporter.Cli
          - app: DiscordChatExporter.Gui
            # GUI assets aren't suffixed, unlike the CLI assets
            asset: DiscordChatExporter

    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      actions: read
      contents: write

    steps:
      - name: Download packaged zip
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.asset }}.${{ matrix.rid }}
          path: ${{ matrix.app }}/


      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload ${{ github.ref_name }}
          ${{ matrix.asset }}.${{ matrix.rid }}.zip
          --repo ${{ github.event.repository.full_name }}

  gather:
    needs: pack
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - run: ls -R dist
      - uses: actions/upload-artifact@v4
        with:
          name: DiscordChatExporter-all
          path: dist



